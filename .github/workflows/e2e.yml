name: E2E Tests

on:
  pull_request:
    paths:
      - '**/*.rs'
      - '**/*.toml'
      - 'tests/e2e/**'
      - 'hack/**'
      - 'Makefile.e2e'
      - '.github/workflows/e2e.yml'
  push:
    branches:
      - main
      - master
    paths:
      - '**/*.rs'
      - '**/*.toml'
      - 'tests/e2e/**'
      - 'hack/**'
      - 'Makefile.e2e'
      - '.github/workflows/e2e.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  # Quick framework tests that don't require full setup
  framework-tests:
    name: E2E Framework Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            tests/e2e/target
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('tests/e2e/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-e2e-

      - name: Build e2e test framework
        run: make -f  Makefile.e2e build-e2e

      - name: Run framework unit tests
        run: make -f  Makefile.e2e test-e2e-framework

  # Full integration tests with runc runtime
  integration-tests-runc:
    name: E2E Integration Tests (runc)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: framework-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            tests/e2e/target
            runc/target
            shim/target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-

      - name: Install system dependencies
        run: |
            sudo apt-get install -y \
            build-essential \
            pkg-config \
            libseccomp-dev \
            runc

      - name: Install crictl
        run: |
          wget -qO- https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.33.0/crictl-v1.33.0-linux-amd64.tar.gz | \
            sudo tar -C /usr/local/bin -xz
          sudo chmod +x /usr/local/bin/crictl
          sudo chown $USER /var/run

      - name: Configure crictl for Kuasar
        run: |
          sudo tee /etc/crictl.yaml > /dev/null <<EOF
          runtime-endpoint: "unix:///run/containerd/containerd.sock"
          image-endpoint: "unix:///run/containerd/containerd.sock"
          timeout: 60
          debug: false
          pull-image-on-create: true
          EOF
          echo "crictl configured for containerd runtime"

      - name: Install and configure containerd
        run: |
          wget -qO- https://github.com/containerd/containerd/releases/download/v2.1.3/containerd-2.1.3-linux-amd64.tar.gz | \
            sudo tar -C /usr/local -xz
          sudo mkdir -p /usr/local/lib/systemd/system
          wget -qO- https://raw.githubusercontent.com/containerd/containerd/main/containerd.service | \
            sudo tee /usr/local/lib/systemd/system/containerd.service
          sudo mkdir -p /etc/containerd
          sudo containerd config default | sudo tee /etc/containerd/config.toml
          sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
          sudo systemctl restart containerd

      - name: Install CNI plugins
        run: |
          sudo mkdir -p /opt/cni/bin
          CNI_PLUGINS_VERSION="v1.5.1"
          CNI_PLUGINS_URL="https://github.com/containernetworking/plugins/releases/download/${CNI_PLUGINS_VERSION}/cni-plugins-linux-amd64-${CNI_PLUGINS_VERSION}.tgz"
          wget -qO- "${CNI_PLUGINS_URL}" | sudo tar -C /opt/cni/bin -xz

      - name: Check containerd socket
        run: |
          if [ ! -S /run/containerd/containerd.sock ]; then
            echo "containerd socket not found!"
            exit 1
          fi
          ls -l /run/containerd/containerd.sock

      - name: Test ctr and crictl CLI
        run: |
          sudo ctr version
          sudo ctr containers list || true
          sudo crictl version
          sudo crictl ps || true
      
      - name: Setup e2e environment
        run: make -f  Makefile.e2e setup-e2e-env-ci

      - name: Run runc e2e tests
        env:
          RUNTIME: runc
          LOG_LEVEL: info
          ARTIFACTS: ${{ github.workspace }}/_artifacts/runc-${{ github.run_number }}
        run: |
          mkdir -p $ARTIFACTS
          make -f  Makefile.e2e test-e2e-runc-ci

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-runc-${{ github.run_number }}
          path: _artifacts/
          retention-days: 7

      - name: Cleanup test environment
        if: always()
        run: make -f  Makefile.e2e clean-test-env

  # WASM integration tests (placeholder for future implementation)
  # integration-tests-wasm:
  #   name: E2E Integration Tests (wasm)
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 45
  #   needs: framework-tests
  #   # TODO: Enable when WASM e2e tests are implemented

  # Summary job that reports overall status
  e2e-tests-summary:
    name: E2E Tests Summary
    runs-on: ubuntu-latest
    needs: [framework-tests, integration-tests-runc]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "E2E Test Results Summary:"
          echo "========================="
          echo "Framework Tests: ${{ needs.framework-tests.result }}"
          echo "Integration Tests (runc): ${{ needs.integration-tests-runc.result }}"
          
          # Fail if any critical tests failed
          if [[ "${{ needs.framework-tests.result }}" != "success" ]]; then
            echo "❌ Framework tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests-runc.result }}" != "success" ]]; then
            echo "❌ runc integration tests failed"
            exit 1
          fi
          
          echo "✅ E2E tests completed successfully"
          echo "📝 Note: WASM e2e tests are not yet implemented on this branch"
